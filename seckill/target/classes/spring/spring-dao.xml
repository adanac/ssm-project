<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置整合mybatis过程
        1.配置数据库相关参数-->
    <!--<context:property-placeholder location="classpath:jdbc.properties"/>-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!--2.数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置连接池属性-->
        <property name="driverClass" value="${driver}"/>

        <!-- 基本属性 url、user、password -->
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>

        <!--c3p0私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!--关闭连接后不自动commit.连接池的connection,当调用close()时,是将连接对象放到池子中,当放到池子过程中,c3p0要做些清理工作,比如commitOnClose,即当我们close时不要commit,默认值 false-->
        <property name="autoCommitOnClose" value="false"/>

        <!--获取连接超时时间.当maxPoolSize=30连接用满的时候,等待连接的超时时间,0表示无限等待,直到有可用连接为止.类似于java中的饥饿性死锁-->
        <property name="checkoutTimeout" value="1000"/>
        <!--当获取连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--约定大于配置-->
    <!--３.配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--往下才是mybatis和spring真正整合的配置-->
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个用;隔开-->
        <property name="typeAliasesPackage" value="com.feagle.entity"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--４:配置扫描Dao接口包,动态实现DAO接口,注入到spring容器. 没有id属性,因为没有其他地方引用,会自动运行-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory , 之所以是sqlSessionFactoryBeanName属性,因为当MapperScannnerConfigure在启动时,可能会出现jdbc.propertites属性文件还没有加载,拿到的dataSource属性是错误的,${driver} 还没有被替换,BeanName后处理的方式,当我们在用mybatis时,才会去找对应的sqlSessionFactory,防止提前处理sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口. 通过扫描特定的包,达到这个包下面的所有DAO接口,自动帮我们实现实现类,并且注入到spring容器中-->
        <property name="basePackage" value="com.feagle.dao"/>
    </bean>

    <!--RedisDao-->
    <bean id="redisDao" class="com.feagle.dao.cache.RedisDao">
        <!--构造方法注入-->
        <constructor-arg index="0" value="192.168.56.104"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
</beans>